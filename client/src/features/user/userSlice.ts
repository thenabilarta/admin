import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import axios, { AxiosError } from "axios";
import { MAIN_URL } from "../../constants";
import { eraseCookie, setCookie } from "../../utils/utils";
import axiosInstance from "../../utils/axiosInstance";

interface UserData {
  token: string;
  profile_pic_src: string;
  user_id: string;
  id: string;
}

export interface UserState {
  user_id?: string;
  status: "loggedin" | "loggedout" | "pending";
  loading: true | false;
  data?: UserData;
  test: string;
  id?: string;
}

const initialState: UserState = {
  status: "pending",
  loading: false,
  test: "",
};

export interface errorData {
  error: {
    code: number;
    status: string;
    message: string;
    details: [string];
  };
}

export interface loginResponse {
  access_token: string;
  access_token_expires: string;
  refresh_token: number;
  refresh_token_expires: number;
}

export const userSignIn = createAsyncThunk(
  "user/signin",
  async (
    { email, password }: { email: string; password: string },
    { rejectWithValue }
  ) => {
    console.log(email, password);

    try {
      const response = await axios.post(`${MAIN_URL}/api/v1/officer/signin`, {
        // const response = await axios.post(`${MAIN_URL}/api/v1/officer/signin`, {
        email,
        password,
      });

      setCookie("access_token", response.data.access_token);
      setCookie("access_token_expires", response.data.access_token_expires);
      setCookie("refresh_token", response.data.refresh_token);
      setCookie("refresh_token_expires", response.data.refresh_token_expires);

      return response.data;
    } catch (error) {
      const err = error as AxiosError;

      console.log("rejected");

      return rejectWithValue(err.response?.data);
    }
  }
);

export const getUserData = createAsyncThunk(
  "user/profile",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axiosInstance.get(
        `${MAIN_URL}/api/officer/profile`
      );

      return response.data;
    } catch (error) {
      const err = error as AxiosError;

      return rejectWithValue(err.response?.data);
    }
  }
);

export const authSlice = createSlice({
  name: "authenticate",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logIn: () => {
      // state.status = "loggedin";
    },
    logOut: (state) => {
      state.status = "loggedout";
      eraseCookie("access_token");
      eraseCookie("access_token_expires");
      eraseCookie("refresh_token");
      eraseCookie("refresh_token_expires");
      // localStorage.removeItem("userInfo");
    },
    decodeJWTUser: () => {
      // const _userInfo = localStorage.getItem("userInfo") || "";
      // try {
      //   const userInfo = JSON.parse(_userInfo);
      //   jwt_decode(userInfo.access_token);
      //   state.data = userInfo;
      //   state.status = "loggedin";
      // } catch (error) {
      //   state.status = "loggedout";
      // }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUserData.pending, (state) => {
        state.loading = true;
        // state.test = "pending";
        state.status = "pending";
      })
      .addCase(getUserData.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
        // state.test = "fulfilled";
        state.status = "loggedin";
      })
      .addCase(getUserData.rejected, (state) => {
        state.loading = false;
        state.status = "loggedout";
        // state.test = "rejected";
      });
  },
});

export const { logIn, logOut, decodeJWTUser } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getUserStateStatus = (state: RootState) => state.user;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default authSlice.reducer;
